<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="org.zerock.start.mapper.MemberMapper">

<insert id="registerAcc">
	INSERT INTO member
	(
	userId, userPw, userName, mobileNum, email, address, birth
	)
	VALUES
	(
	#{userId}, #{userPw}, #{userName}, #{mobileNum}, #{email}, #{address}, #{birth}  
	)
</insert>

<insert id="insertAuth">
	INSERT INTO member_auth
	(userId, auth)
	VALUES
	(#{userId}, #{auth})
</insert>

<select id="read" resultMap="memberMap">
	SELECT 
	m.userId userId,
	m.userPw userPw,
	m.userName userName,
	m.userNickName userNickName,
	m.mobileNum mobileNum,
	m.email email,
	m.address address,
	m.birth birth,
	m.enabled enabled,
	m.regdate regdate,
	m.updateDate updateDate,
	m.login login,
	m.point point,
	m.birthday birthday,
	a.auth auth
	FROM member m LEFT JOIN member_auth a ON m.userId = a.userId
	WHERE m.userId = #{userId}
</select>

<resultMap type="org.zerock.start.domain.MemberVO" id="memberMap">
	<id property="userId" column="userId"></id>
	<result property="userPw" column="userPw"></result>
	<result property="userName" column="userName"></result>
	<result property="userNickName" column="userNickName"></result>
	<result property="mobileNum" column="mobileNum"></result>
	<result property="email" column="email"></result>
	<result property="address" column="address"></result>
	<result property="birth" column="birth"></result>
	<result property="regdate" column="regdate"></result>
	<result property="updateDate" column="updateDate"></result>
	<result property="enabled" column="enabled"/>
	<result property="point" column="point"/>
	<result property="login" column="login"/>
	<result property="birthday" column="birthday"/>
	<collection property="authList" resultMap="authMap"></collection>
</resultMap>
<resultMap type="org.zerock.start.domain.AuthVO" id="authMap">
	<result property="userId" column="userId"/>
	<result property="auth" column="auth"/>
</resultMap>

<select id="checkId" resultType="int">
	SELECT COUNT(*) FROM member
	WHERE userId = #{userId}
</select>

<update id="updateInfo">
	UPDATE member
	SET userPw = #{userPw},
		mobileNum = #{mobileNum},
		email = #{email},
		address = #{address},
		userNickName = #{userNickName}
	WHERE userId = #{userId}

</update>

<select id="getDate" resultType="org.zerock.start.domain.MemberVO">
	SELECT login FROM member
	WHERE userId = #{userId}
</select>

<update id="updateLoginPoint">
	UPDATE member
	SET point = #{point},
		login = #{login}
	WHERE userId = #{userId}	
</update>

<update id="updatePoint">
	UPDATE member
	SET point = #{point}
	WHERE userId = #{userId}
</update>

<select id="getProfile" resultType="org.zerock.start.domain.MemberVO">
	SELECT m.userId userId,
		   m.userName userName,
		   m.userNickName userNickName,
		   m.point point,
		   f.fileName fileName
	FROM member m LEFT JOIN member_profile f ON m.userId = f.userId
	WHERE m.userId = #{userId}
</select>

<insert id="registerPoint" useGeneratedKeys="true" keyProperty="pid" keyColumn="pid">
	INSERT INTO point_inout
	(userId, point, pointInOut)
	VALUES
	(#{userId}, #{point}, #{pointInOut})
</insert>


<!-- 받아온 list를 jsp로 넘길때 중복이 제거된 상태로 넘어가기 때문에 hashmap을 이용하여 둘을 묶어서 넘겨줌-->
<select id="getPointInfo" resultMap="pointMap">
	SELECT 
		   userId,
		   SUM(point) point,
		   pointInOut
		    
	FROM point_inout
	WHERE userId = #{userId}
	GROUP BY pointInOut
	ORDER BY point DESC
</select>
<resultMap type="org.zerock.start.domain.PointVO" id="pointMap">
	<id column="userId" property="userId"/>
	<collection property="pointList" resultMap="pointList"></collection>
	<collection property="pointInOut" resultMap="inOutList"></collection>
	<collection property="pointMap" resultMap="pointHashMap"></collection>
</resultMap>

<resultMap type="java.util.HashMap" id="pointHashMap">
	<result property="key" column="pointInOut"/>
	<result property="value" column="point" />
</resultMap>
<resultMap type="double" id="pointList">
	<result property="pointList" column="point"/>
</resultMap>
<resultMap type="String" id="inOutList">
	<result property="pointInOut" column="pointInOut"/>
</resultMap>


<!-- 얻은 포인트 정보 -->
<select id="getEarnPoint" resultMap="earnPoint">
<![CDATA[
	SELECT userId, pointInOut, count(1) point
	FROM point_inout
	WHERE userId = #{userId} AND point > 0
	GROUP BY pointInOut
]]>
</select>
<resultMap type="org.zerock.start.domain.PointVO" id="earnPoint">
	<id column="userId" property="userId"></id>
	<collection property="pointMap" resultMap="earnHashMap"></collection>
</resultMap>
<resultMap type="java.util.HashMap" id="earnHashMap">
	<result property="key" column="pointInOut"/>
	<result property="value" column="point" />
</resultMap>



<!-- 잃은 포인트 정보 -->
<select id="getLosePoint" resultMap="losePoint">
<![CDATA[
	SELECT userId, pointInOut, count(1) point
	FROM point_inout
	WHERE userId = #{userId} AND point < 0
	GROUP BY pointInOut
]]>
</select>
<resultMap type="org.zerock.start.domain.PointVO" id="losePoint">
	<id column="userId" property="userId"></id>
	<collection property="pointMap" resultMap="loseHashMap"></collection>
</resultMap>
<resultMap type="java.util.HashMap" id="loseHashMap">
	<result property="key" column="pointInOut"/>
	<result property="value" column="point" />
</resultMap>

<!-- auth가 member인 모든 userId 검색 -->
<select id="getAllMember" resultType="org.zerock.start.domain.MemberVO">
	<![CDATA[
	SELECT userId FROM member_auth
	WHERE auth = 'ROLE_MEMBER'
	]]>
</select>

<!-- auth가 member인 userId를 db에 저장 -->
<insert id="insertApprove">
	INSERT INTO approve_auth
	(reqId, appId)
	VALUES
	(#{reqId}, #{appId})
</insert>

<!-- 승인해줘야하는 목록 -->
<select id="getApproveList" resultType="org.zerock.start.domain.ApproveVO">
	SELECT reqId 
	FROM approve_auth
	WHERE appId = #{appId} AND state = 1
</select>

<!-- 승인요청 update -->
<update id="updateApp">
	UPDATE approve_auth
	SET state = 0
	WHERE appId = #{appId} AND reqId = #{reqId}
</update>

<select id="getApproveState" resultType="org.zerock.start.domain.ApproveVO">
	SELECT * FROM approve_auth
	WHERE reqId = #{reqId}
</select>

<insert id="updateAuth">
	INSERT INTO member_auth
	(userId, auth)
	VALUES
	(#{userId}, 'ROLE_MEMBER')
</insert>

<update id="updateBirthday">
	UPDATE member
	SET birthday = #{birthday}
	WHERE userId = #{userId}
</update>

</mapper>